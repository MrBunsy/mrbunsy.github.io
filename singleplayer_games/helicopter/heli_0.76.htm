<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>
<head>
<title>'Pool' - Testing the helicopter engine version 0.68</title>
<script src="keys.js" type="text/javascript"></script>
</head>
<body onkeydown="keydown(event)" onkeyup="keyup(event)">
<span id="worldspan"></span>
<span id="testspan"></span>
<script language="JavaScript" type="text/javascript">
<!--
//objects can't move
var worldobjects=new Array()
//entities can move
var worldentities=new Array()
//collidables can be collided with, these can be both objects and entities
var worldcollideables=new Array()
var world=document.getElementById('worldspan');
var gravity=0.125;
//gravity=0

//velocity retained during collision (as fraction)
var dampen=0.98


var bordervar

//vx, vy = velocity (pixels per refresh);  fx,fy = forces
function entity(name,x,y,width,height,mass,div,image,type,vx,vy,fx,fy,hard,sticky,shape,border)
{
this.name=name;
this.x=x;
this.y=y;
this.width=width;
this.height=height;
this.mass=mass;
//div= name+'div'
this.div=div;
this.image=image;
//types 0 =moveable entitiy, 1= still object
this.type=type;
//v=veloctity,f=force
this.vx=vx;
this.vy=vy;
this.fx=fx;
this.fy=fy;
//not currently used
//this.state=state
//what type of collision?
this.sticky=sticky;
//shapes, 1= rectangle, 0=circle
this.shape=shape
//object or entity?
switch (type)
{case 0:
worldentities.push(this.name);
break;
case 1:
worldobjects.push(this.name);
break;}
//can it collide?
this.hard=hard
if(hard){worldcollideables.push(this.name)}
this.border=border
if(border){bordervar="border:solid black 1px;"}else{bordervar=''}

if(!testfordiv(div)){world.innerHTML+="<div id=\'"+div+"' style='position:absolute;  width:"+width+";"+bordervar+" height:"+height+";  top:"+y+"; left:"+x+"'><img src='"+image+"'></div>"}
}

function testfordiv(id)
{var testme=document.getElementById(id);
if(testme){return true;}else{return false;}}

var ball2=new entity('ball2',370,610,50,50,50,'ball2div','balls/blue.gif',1,0,0,0,0,false,false,1);

var lowerborder=new entity('lowerborder',0,700,800,100,10,'lowerborderdiv','blank.gif',1,0,0,0,0,true,false,1,true);
var upperborder=new entity('upperborder',0,-100,800,100,10,'upperborderdiv','nlank.gif',1,0,0,0,0,true,false,1,true);
var leftborder=new entity('leftborder',-100,0,100,800,10,'leftborderdiv','blank.gif',1,0,0,0,0,true,false,1,true);
var rightborder=new entity('rightborder',800,0,100,800,10,'rightborderdiv','blank.gif',1,0,0,0,0,true,false,1,true);
//entity            (name,x,y,width,height,mass,div,image,type,vx,vy,fx,fy,hard,sticky,shape,border)
var heli=new entity('heli',50,50,47,44,100,'helidiv','helismall.gif',0,0,0,0,0,true,false,1,false);

var tree=new entity('tree',500,500,50,75,100,'treediv','tree.gif',1,0,0,0,0,true,true,1,false);



var testing=new entity('testing',400,0,50,75,100,'testingdiv','testing.gif',0,3,1,0,0,true,false,1,false);
var green=new entity('green',700,0,50,75,100,'greendiv','green.gif',0,-2,1,0,0,true,false,1,false);
var orange=new entity('orange',700,600,50,75,100,'orangediv','orange.gif',0,-2,1,0,-20,true,false,1,false);

function whatsinworld()
{for (i=0;i<worldobjects.length;i++)
{if(testfordiv(worldobjects[i])){alert(worldobjects[i]+" exists")}else{alert(worldobjects[i]+" doesn't exist")}}}

//loop stuff
var loopme=setInterval('loop()',20)
function loop()
{
moveheli()
updateentities()
}
//displacement
var currentleft;
var currenttop;
//velocity
var currentvx;
var currentvy;
var newvx
var newvy
//force
var currentfx;
var currentfy;
//acceleration
var ax
var ay

//seconds per loop
var time= 0.02
var collide;
var collide2;
var ourvx;
var theirvx;
var ourvy;
var theirvy;

var whichdiv;
var ournewvx;
var ournewvy;
var theirnewvx;
var theirnewvy;

var ourleft
var ourright
var ourtop
var ourbottom
var theirleft
var theirright
var theirtop
var theirbottom
var dontcontinue

var diffinx
var diffiny
var collisionangle
var theirspeed
var ourspeed

var ourperpendicularv;
var ourparellelv;
var theirperpendicularv;
var theirparellelv;

var ournewperpendicularv;
var ournewparellelv;
var theirnewperpendicularv;
var theirnewparellelv;

var ouranglebelowx
var theiranglebelowx

var currentlycolliding

function updateentities()
{

for (i=0;i<worldentities.length;i++)
{

//check we're not currently in a collision



currentleft=eval(worldentities[i]+".x")
currenttop=eval(worldentities[i]+".y")
currentvx=eval(worldentities[i]+".vx")
currentvy=eval(worldentities[i]+".vy")
currentfx=eval(worldentities[i]+".fx")
currentfy=eval(worldentities[i]+".fy")
currentmass=eval(worldentities[i]+".mass")
ax=(currentfx)/currentmass
ay=(currentfy+gravity*currentmass)/currentmass
//v=u+at
newvx=currentvx+ax
newvy=currentvy+ay
//'friction'
//if(newvx > 0){newvx-=0.01}
//if(newvx < 0){newvx+=0.01}
//if(newvy > 0){newvy-=0.01}
//if(newvy < 0){newvy+=0.01}
//eval(worldentities[i]+".vy=Math.round(newvy*10)/10")
//eval(worldentities[i]+".vx=Math.round(newvx*10)/10")
eval(worldentities[i]+".vy=newvy")
eval(worldentities[i]+".vx=newvx")
//s=ut + 0.5at^2
newleft=(newvx+1/2*ax)+currentleft
newleft=Math.round(newleft)

//collide=checkcollide(worldentities[i])
newtop=(newvy+1/2*ay)+currenttop
newtop=Math.round(newtop)
/*
currentlycolliding=checkcollide(worldentities[i])
if (currentlycolliding !== false)
{
//currentvx=currentvx*(-1)
//currentvy=currentvy*(-1)
currentvx=0
currentvy=0
}
*/

collide=checkpotentialcollide(worldentities[i],newleft,newtop)

//collide=checkcollide(worldentities[i])
//if (checkcollide(worldentities[i]) == false){}
if (collide !== false){
//----------------------------------there has been a collision----------------------------------
runcollisionstuff()
//end of if collision if statement
}
//----------------------------------end of collisions----------------------------------
eval(worldentities[i]+".x=newleft");
eval(worldentities[i]+".y=newtop");
whichdiv=document.getElementById(worldentities[i]+'div');
whichdiv.style.left=newleft;
whichdiv.style.top=newtop;
}
}

function moveheli()
{
if (moveright){heli.fx+=2; if (heli.fx>20){heli.fx=20}}
if (moveleft){heli.fx-=2; if (heli.fx<-20){heli.fx=-20}}
if(!moveright && !moveleft){if (heli.fx>0){heli.fx-=5};if (heli.fx<0){heli.fx+=5}}
if (moveup){heli.fy-=2; if (heli.fy < -20){heli.fy=-20}}
if (movedown){heli.fy+=2; if (heli.fy > 10){heli.fy=10}}
if (!moveup && !movedown){heli.fy+=2; if (heli.fy > 0){heli.fy=0}}
}

var rightx;
var leftx;
var topy;
var bottomy;
var collidewith=new Array()
//var ourcentrex
//var ourcentrey
//var theircentrex
//var theircentrey
var ourradius
var theirradius
var circledistance
var ourshape;

var radii
var typeofthing
var colliding

function checkcollide(whichentity)
{
leftx=eval(whichentity+'.x')
rightx=eval(whichentity+'.x+'+whichentity+'.width')
topy=eval(whichentity+'.y')
bottomy=eval(whichentity+'.y+'+whichentity+'.height')
for (i2=0;i2<worldcollideables.length;i2++)
{
if (worldcollideables[i2] !== whichentity)
{if(rightx > eval(worldcollideables[i2]+'.x') && leftx < eval(worldcollideables[i2]+'.x+'+worldcollideables[i2]+'.width') && topy < eval(worldcollideables[i2]+'.y+'+worldcollideables[i2]+'.height') && bottomy > eval(worldcollideables[i2]+'.y')){return worldcollideables[i2];}}
}
return false;
}

function runcollisionstuff()
{
for(i3=0;i3<collide;i3++)
{
//if(i3>1){alert(i3)}

//checkcollide(worldentities[i])

typeofthing=eval(collidewith[i3]+'.type')
colliding=checkcollide(collidewith[i3])
if(checkcollide(collidewith[i3])!==false){typeofthing=1}

switch(typeofthing){
case 0:

newleft=currentleft;
newtop=currenttop;
ourcentrex=eval('currentleft+'+worldentities[i]+'.width/2')
ourcentrey=eval('currenttop+'+worldentities[i]+'.height/2')
theircentrex=eval(collidewith[i3]+'.x+'+collidewith[i3]+'.width/2')
theircentrey=eval(collidewith[i3]+'.y+'+collidewith[i3]+'.height/2')
diffinx=theircentrex-ourcentrex
diffiny=theircentrey-ourcentrey
if(diffinx == 0){collisionangle=0}else{collisionangle=Math.atan(diffiny/diffinx)}
//alert(collisionangle/Math.PI*180)
ourvx=currentvx
ourvy=currentvy
//pythagoras strikes again.  It likes doing that.
ourspeed=Math.sqrt(ourvx*ourvx+ourvy*ourvy)
ourmass=currentmass
theirvy=eval(collidewith[i3]+'.vy')
theirvx=eval(collidewith[i3]+'.vx')
theirspeed=Math.sqrt(theirvx*theirvx+theirvy*theirvy)
theirmass=eval(collidewith[i3]+'.mass')

//I'm unsure what to do if a square hits a circle, so currently they collide as per two circles
//alert(worldentities[i])
//the 5==2 is a cheap way of getting everything to collide as circles, as I'm unsure wether I want to keep it like that or not
if(eval(worldentities[i]+'.shape')==1 && eval(collidewith[i3]+'.shape')==1 && 5==2)
{
//this I *think* is correct for squares in collisions, although I'm a little unsure
//momentum=mass*velocity
//Kinetic Energy = 0.5*mass*velocity^2
//both are conserved
//from an equation I found on the internet (elastic collisons, re-arrengement of the above two equations)
ournewvx=( (ourmass-theirmass)/(ourmass+theirmass))*ourvx+( (2*theirmass)/(ourmass+theirmass) )*theirvx
ournewvy=( (ourmass-theirmass)/(ourmass+theirmass))*ourvy+( (2*theirmass)/(ourmass+theirmass) )*theirvy
if(checkcollide(collidewith[i3])!==false)
   {
   theirnewvx=( (theirmass-ourmass)/(theirmass+ourmass))*theirvx+( (2*ourmass)/(theirmass+ourmass) )*ourvx
	 theirnewvy=( (theirmass-ourmass)/(theirmass+ourmass))*theirvy+( (2*ourmass)/(theirmass+ourmass) )*ourvy
	 }
}else{
//this should be correct for circles now

//direction of motion - not really sure how these work, beyond overcoming the limited range of inverse trig 
//http://director-online.com/buildArticle.php?id=532 proved immensly useful, and in actual fact, rendered most of 
//my previous work at collisions wasted as I re-wrote a lot of it
if(ourvx<0){ouranglebelowx=(Math.PI)+(Math.atan(ourvy/ourvx))}
else if(ourvx>0 && ourvy>=0){ouranglebelowx=Math.atan(ourvy/ourvx)}
else if(ourvx>0 && ourvy < 0){ouranglebelowx=2*(Math.PI)+(Math.atan(ourvy/ourvx))}
else if(ourvx==0 && ourvy == 0){ouranglebelowx=0}
else if(ourvx==0 && ourvy>=0){ouranglebelowx=(Math.PI)/2}
else{ouranglebelowx=3*(Math.PI)/2}

if(theirvx<0){theiranglebelowx=(Math.PI)+(Math.atan(theirvy/theirvx))}
else if(theirvx>0 && theirvy>=0){theiranglebelowx=Math.atan(theirvy/theirvx)}
else if(theirvx>0 && theirvy < 0){theiranglebelowx=2*(Math.PI)+(Math.atan(theirvy/theirvx))}
else if(theirvx==0 && theirvy == 0){theiranglebelowx=0}
else if(theirvx==0 && theirvy>=0){theiranglebelowx=(Math.PI)/2}
else{theiranglebelowx=3*(Math.PI)/2}
ourparellelv=ourspeed*(Math.cos(ouranglebelowx-collisionangle))
ourperpendicularv=ourspeed*(Math.sin(ouranglebelowx-collisionangle))
theirparellelv=theirspeed*(Math.cos(theiranglebelowx-collisionangle))
theirperpendicularv=theirspeed*(Math.sin(theiranglebelowx-collisionangle))
ournewparellelv=( (ourmass-theirmass)/(ourmass+theirmass))*ourparellelv+( (2*theirmass)/(ourmass+theirmass) )*theirparellelv
theirnewparellelv=( (theirmass-ourmass)/(theirmass+ourmass))*theirparellelv+( (2*ourmass)/(theirmass+ourmass) )*ourparellelv
ournewvx=ournewparellelv*(Math.cos(collisionangle))+ourperpendicularv*(Math.cos(collisionangle+(Math.PI/2)))
ournewvy=ournewparellelv*(Math.sin(collisionangle))+ourperpendicularv*(Math.sin(collisionangle+(Math.PI/2)))
theirnewvx=theirnewparellelv*(Math.cos(collisionangle))+theirperpendicularv*(Math.cos(collisionangle+(Math.PI/2)))
theirnewvy=theirnewparellelv*(Math.sin(collisionangle))+theirperpendicularv*(Math.sin(collisionangle+(Math.PI/2)))
}
eval(worldentities[i]+".vx=ournewvx*dampen")
eval(worldentities[i]+".vy=ournewvy*dampen")
//if(checkcollide(collidewith[i3])!==false)   {
	 eval(collidewith[i3]+".vx=theirnewvx*dampen")
	 eval(collidewith[i3]+".vy=theirnewvy*dampen")
//   }

newleft=newleft+ournewvx
newtop=newtop+ournewvy
break;

case 1:
switch(eval(collidewith[i3]+'.sticky'))
{
case false:
ourleft=eval(worldentities[i]+'.x')
ourright=eval(worldentities[i]+'.x+'+worldentities[i]+'.width')
ourtop=eval(worldentities[i]+'.y')
ourbottom=eval(worldentities[i]+'.y+'+worldentities[i]+'.height')

theirleft=eval(collidewith[i3]+'.x')
theirright=eval(collidewith[i3]+'.x+'+collidewith[i3]+'.width')
theirtop=eval(collidewith[i3]+'.y')
theirbottom=eval(collidewith[i3]+'.y+'+collidewith[i3]+'.height')
dontcontinue=0
//these two work for tiny things colliding with big things, provided you're not at the edges of the big things:
if(ourtop > theirtop && ourbottom < theirbottom){eval(worldentities[i]+".vx=currentvx*(-1)*dampen");eval(worldentities[i]+".vy=currentvy*dampen");dontcontinue++}
if(ourright < theirright && ourleft > theirleft){eval(worldentities[i]+".vy=currentvy*(-1)*dampen");eval(worldentities[i]+".vx=currentvx*dampen");dontcontinue++}
if(dontcontinue==0){
eval(worldentities[i]+".vx=currentvx*(-1)*dampen")
eval(worldentities[i]+".vy=currentvy*(-1)*dampen")
}

break;
case true:
eval(worldentities[i]+".vx=0");
eval(worldentities[i]+".vy=0");
break;}

newleft=currentleft
newtop=currenttop;

break;}
//end of collidewith loop
}
collidewith=new Array;


}


function checkpotentialcollide(whichentity,testthisx,testthisy)
{
leftx=testthisx
rightx=eval('leftx+'+whichentity+'.width')
topy=testthisy
bottomy=eval('topy+'+whichentity+'.height')

ourcentrex=eval('testthisx+'+whichentity+'.width/2')
ourcentrey=eval('testthisy+'+whichentity+'.height/2')
ourradius=eval(whichentity+'.height/2')

ourshape=eval(whichentity+'.shape')

for (i2=0;i2<worldcollideables.length;i2++)
{

if(ourshape==0 && eval(worldcollideables[i2]+'.shape')==0)
{
//both entities are circles
if (worldcollideables[i2] !== whichentity)
{
theircentrex=eval(worldcollideables[i2]+'.x+'+worldcollideables[i2]+'.width/2')
theircentrey=eval(worldcollideables[i2]+'.y+'+worldcollideables[i2]+'.height/2')
theirradius=eval(worldcollideables[i2]+'.height/2')
radii=(theirradius+ourradius)

//optimisation

if(Math.abs(ourcentrex-theircentrex) < radii && Math.abs(ourcentrey-theircentrey) <radii){
//pythagoras
circledistance=Math.sqrt( (ourcentrex-theircentrex)*(ourcentrex-theircentrex)+(ourcentrey-theircentrey)*(ourcentrey-theircentrey) ) 
//if the distance between the two circles is less than or equal to the sum of their two radii then they'll collide
if(circledistance<(theirradius+ourradius) || circledistance==(theirradius+ourradius)){collidewith.push(worldcollideables[i2])}

//end of optimisation if
}

}

}else{
//one of us isn't a circle
if (worldcollideables[i2] !== whichentity)
{if(rightx > eval(worldcollideables[i2]+'.x') && leftx < eval(worldcollideables[i2]+'.x+'+worldcollideables[i2]+'.width') && topy < eval(worldcollideables[i2]+'.y+'+worldcollideables[i2]+'.height') && bottomy > eval(worldcollideables[i2]+'.y')){collidewith.push(worldcollideables[i2])}}
}

}
if (collidewith.length!==0){return collidewith.length}

return false;

}
//script and artwork copyright Luke Wallin 2007 
//-->
</script>

</body>
</html>

